Demo Walkthrough

Admin 
user name: pabloescobar 
password: 12345
email: javednissar@gmail.com

Basic User 1
user name: tonymontana
password:987656
email: javed.nissar@mail.utoronto.ca

Create Basic User 2
user name: propjoe 
password: wasdf
email: javednissar@protonmail.com

Admin:
1. Log in to site
2. Create new projects: "Dogs" and "Cats"
3. Invite Basic User 1 to the project Cats
4. Create new task "buy cat food" within Cat project and assign it to Basic User 1 with due date Dec 30
5. Create Basic User 2
6. Create a new task "Book vet appointment" within Cat project and assign it to Basic User 2 with due date Jan 10
7. Implement basic user steps
8. Delete the task that is marked with done
9. Go to user settings and change password
10. Log in to confirm password has been changed

Basic User 1:
1. Log in to site
2. Wait until you recieve email notification that you have been invited to Cat project by an admin
3. Create new task "Go to cat cafe" with due date this Sunday
4. Mark "Go to cat cafe" as done
5. Mark "Buy cat food" as a blocker 

Questions:
What features were limited to admin functionality and why were they?
	deleting tasks, creating projects, inviting users to projects, assigning users to projects
	we did not 

Why did you design the user and project data schemas this way?
	made the most logical sense to contain list of tasks within the project object
	We did not any user information besides email for project and task management
	
How do you authenticate user log-in information?
	send a secure https procotol to server, and receive a json web token back to confirm successful login

How did your choice of Vue.js influence your design decisions in the user interface?
	made it very easy to display and sort data, also easy to have all of the tasks and project code in a reproducable template 

What were the deviations from the project proposal?
	removed the project_creation.html to limit the number of unnecessary views, replacing it with a modal pop up
	limited the amount of users assigned to a task to 1 (there still can be any number of users associated with a project)
	limited the number of admins assigned to project to 1
	tasks do not have an estimated time to complete
	admins do not have to authorize admin actions by re-entering their password
	admins cannot change other users profile settings
	admins cannot assign tasks to themselves
	admins cannot change any task to be done or blocked, only people assigned to the task can modify their status

Why did you use JSON web tokens?
	was a simple object that the backend sends the front end to hold that confirms user login

Why did you choose vue.js for the front end interface design?
	prior experience, made it easy create reactive web elements 

Why did we choose to use bootstrap?
	very effective way to design and format our web page

How were modals inplemented?
	using bootstrap, made design sense and redirecting to new page just to enter project name seemed unnecessary

Why did you choose mongodb?
	 we initially thought that it would be the best way represent the database + it was done in class

What did you implement and improve in reponse to the phase 1 feedback?
How did you increase the code complexity from the last phase? 
	removed project_creation.html and turned it into a modal 
	Added chronological and priority level sorting when viewing all tasks

What would you have done differently on this project?
	-not use monogodb, relational database would work better for this project's data
	-we would have adhered closely to best practices for development with Vue as the front-end became quite unwieldy near the end

What challenges did you encounter when working on this project?
	getting frontend communicating correctly with the backend through fetch ajax call